{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { styled } from '@mui/material/styles';\nimport { useGridSelector } from \"../../utils/index.js\";\nimport { useGridRootProps } from \"../../utils/useGridRootProps.js\";\nimport { useGridPrivateApiContext } from \"../../utils/useGridPrivateApiContext.js\";\nimport { useGridEvent } from \"../../utils/useGridEvent.js\";\nimport { GridColumnHeaderItem } from \"../../../components/columnHeaders/GridColumnHeaderItem.js\";\nimport { gridColumnsTotalWidthSelector, gridGroupHeaderHeightSelector, gridHasFillerSelector, gridHeaderHeightSelector, gridVerticalScrollbarWidthSelector } from \"../dimensions/gridDimensionsSelectors.js\";\nimport { gridRenderContextColumnsSelector } from \"../virtualization/index.js\";\nimport { computeOffsetLeft } from \"../virtualization/useGridVirtualScroller.js\";\nimport { GridColumnGroupHeader } from \"../../../components/columnHeaders/GridColumnGroupHeader.js\";\nimport { gridColumnPositionsSelector, gridVisiblePinnedColumnDefinitionsSelector, gridColumnLookupSelector } from \"../columns/index.js\";\nimport { gridColumnGroupsUnwrappedModelSelector } from \"../columnGrouping/gridColumnGroupsSelector.js\";\nimport { GridScrollbarFillerCell as ScrollbarFiller } from \"../../../components/GridScrollbarFillerCell.js\";\nimport { getPinnedCellOffset } from \"../../../internals/utils/getPinnedCellOffset.js\";\nimport { GridColumnHeaderSeparatorSides } from \"../../../components/columnHeaders/GridColumnHeaderSeparator.js\";\nimport { gridClasses } from \"../../../constants/gridClasses.js\";\nimport { shouldCellShowLeftBorder, shouldCellShowRightBorder } from \"../../../utils/cellBorderUtils.js\";\nimport { PinnedColumnPosition } from \"../../../internals/constants.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const GridColumnHeaderRow = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'ColumnHeaderRow'\n})({\n  display: 'flex'\n});\nexport const useGridColumnHeaders = props => {\n  const {\n    visibleColumns,\n    sortColumnLookup,\n    filterColumnLookup,\n    columnHeaderTabIndexState,\n    columnGroupHeaderTabIndexState,\n    columnHeaderFocus,\n    columnGroupHeaderFocus,\n    headerGroupingMaxDepth,\n    columnMenuState,\n    columnVisibility,\n    columnGroupsHeaderStructure,\n    hasOtherElementInTabSequence\n  } = props;\n  const [dragCol, setDragCol] = React.useState('');\n  const [resizeCol, setResizeCol] = React.useState('');\n  const apiRef = useGridPrivateApiContext();\n  const rootProps = useGridRootProps();\n  const columnGroupsModel = useGridSelector(apiRef, gridColumnGroupsUnwrappedModelSelector);\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const renderContext = useGridSelector(apiRef, gridRenderContextColumnsSelector);\n  const pinnedColumns = useGridSelector(apiRef, gridVisiblePinnedColumnDefinitionsSelector);\n  const columnsLookup = useGridSelector(apiRef, gridColumnLookupSelector);\n  const offsetLeft = computeOffsetLeft(columnPositions, renderContext, pinnedColumns.left.length);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const gridHasFiller = useGridSelector(apiRef, gridHasFillerSelector);\n  const headerHeight = useGridSelector(apiRef, gridHeaderHeightSelector);\n  const groupHeaderHeight = useGridSelector(apiRef, gridGroupHeaderHeightSelector);\n  const scrollbarWidth = useGridSelector(apiRef, gridVerticalScrollbarWidthSelector);\n  const handleColumnResizeStart = React.useCallback(params => setResizeCol(params.field), []);\n  const handleColumnResizeStop = React.useCallback(() => setResizeCol(''), []);\n  const handleColumnReorderStart = React.useCallback(params => setDragCol(params.field), []);\n  const handleColumnReorderStop = React.useCallback(() => setDragCol(''), []);\n  const leftRenderContext = React.useMemo(() => {\n    return pinnedColumns.left.length ? {\n      firstColumnIndex: 0,\n      lastColumnIndex: pinnedColumns.left.length\n    } : null;\n  }, [pinnedColumns.left.length]);\n  const rightRenderContext = React.useMemo(() => {\n    return pinnedColumns.right.length ? {\n      firstColumnIndex: visibleColumns.length - pinnedColumns.right.length,\n      lastColumnIndex: visibleColumns.length\n    } : null;\n  }, [pinnedColumns.right.length, visibleColumns.length]);\n  useGridEvent(apiRef, 'columnResizeStart', handleColumnResizeStart);\n  useGridEvent(apiRef, 'columnResizeStop', handleColumnResizeStop);\n  useGridEvent(apiRef, 'columnHeaderDragStart', handleColumnReorderStart);\n  useGridEvent(apiRef, 'columnHeaderDragEndNative', handleColumnReorderStop);\n\n  // Helper for computation common between getColumnHeaders and getColumnGroupHeaders\n  const getColumnsToRender = params => {\n    const {\n      renderContext: currentContext = renderContext\n    } = params || {};\n    const firstColumnToRender = currentContext.firstColumnIndex;\n    const lastColumnToRender = currentContext.lastColumnIndex;\n    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n    return {\n      renderedColumns,\n      firstColumnToRender,\n      lastColumnToRender\n    };\n  };\n  const getFillers = (params, children, leftOverflow, borderBottom = false) => {\n    const isPinnedRight = params?.position === PinnedColumnPosition.RIGHT;\n    const isNotPinned = params?.position === undefined;\n    const hasScrollbarFiller = pinnedColumns.right.length > 0 && isPinnedRight || pinnedColumns.right.length === 0 && isNotPinned;\n    const leftOffsetWidth = offsetLeft - leftOverflow;\n    return /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [isNotPinned && /*#__PURE__*/_jsx(\"div\", {\n        role: \"presentation\",\n        style: {\n          width: leftOffsetWidth\n        }\n      }), children, isNotPinned && /*#__PURE__*/_jsx(\"div\", {\n        role: \"presentation\",\n        className: clsx(gridClasses.filler, borderBottom && gridClasses['filler--borderBottom'])\n      }), hasScrollbarFiller && /*#__PURE__*/_jsx(ScrollbarFiller, {\n        header: true,\n        pinnedRight: isPinnedRight,\n        borderBottom: borderBottom,\n        borderTop: false\n      })]\n    });\n  };\n  if (process.env.NODE_ENV !== \"production\") getFillers.displayName = \"getFillers\";\n  const getColumnHeaders = (params, other = {}) => {\n    const {\n      renderedColumns,\n      firstColumnToRender\n    } = getColumnsToRender(params);\n    const columns = [];\n    for (let i = 0; i < renderedColumns.length; i += 1) {\n      const colDef = renderedColumns[i];\n      const columnIndex = firstColumnToRender + i;\n      const isFirstColumn = columnIndex === 0;\n      const tabIndex = columnHeaderTabIndexState !== null && columnHeaderTabIndexState.field === colDef.field || isFirstColumn && !hasOtherElementInTabSequence ? 0 : -1;\n      const hasFocus = columnHeaderFocus !== null && columnHeaderFocus.field === colDef.field;\n      const open = columnMenuState.open && columnMenuState.field === colDef.field;\n      const pinnedPosition = params?.position;\n      const pinnedOffset = getPinnedCellOffset(pinnedPosition, colDef.computedWidth, columnIndex, columnPositions, columnsTotalWidth, scrollbarWidth);\n      const siblingWithBorderingSeparator = pinnedPosition === PinnedColumnPosition.RIGHT ? renderedColumns[i - 1] : renderedColumns[i + 1];\n      const isSiblingFocused = siblingWithBorderingSeparator ? columnHeaderFocus !== null && columnHeaderFocus.field === siblingWithBorderingSeparator.field : false;\n      const isLastUnpinned = columnIndex + 1 === columnPositions.length - pinnedColumns.right.length;\n      const indexInSection = i;\n      const sectionLength = renderedColumns.length;\n      const showLeftBorder = shouldCellShowLeftBorder(pinnedPosition, indexInSection);\n      const showRightBorder = shouldCellShowRightBorder(pinnedPosition, indexInSection, sectionLength, rootProps.showColumnVerticalBorder, gridHasFiller);\n      columns.push(/*#__PURE__*/_jsx(GridColumnHeaderItem, _extends({}, sortColumnLookup[colDef.field], {\n        columnMenuOpen: open,\n        filterItemsCounter: filterColumnLookup[colDef.field] && filterColumnLookup[colDef.field].length,\n        headerHeight: headerHeight,\n        isDragging: colDef.field === dragCol,\n        colDef: colDef,\n        colIndex: columnIndex,\n        isResizing: resizeCol === colDef.field,\n        isLast: columnIndex === columnPositions.length - 1,\n        hasFocus: hasFocus,\n        tabIndex: tabIndex,\n        pinnedPosition: pinnedPosition,\n        pinnedOffset: pinnedOffset,\n        isLastUnpinned: isLastUnpinned,\n        isSiblingFocused: isSiblingFocused,\n        showLeftBorder: showLeftBorder,\n        showRightBorder: showRightBorder\n      }, other), colDef.field));\n    }\n    return getFillers(params, columns, 0);\n  };\n  const getColumnHeadersRow = () => {\n    return /*#__PURE__*/_jsxs(GridColumnHeaderRow, {\n      role: \"row\",\n      \"aria-rowindex\": headerGroupingMaxDepth + 1,\n      ownerState: rootProps,\n      className: gridClasses['row--borderBottom'],\n      style: {\n        height: headerHeight\n      },\n      children: [leftRenderContext && getColumnHeaders({\n        position: PinnedColumnPosition.LEFT,\n        renderContext: leftRenderContext\n      }, {\n        disableReorder: true\n      }), getColumnHeaders({\n        renderContext\n      }), rightRenderContext && getColumnHeaders({\n        position: PinnedColumnPosition.RIGHT,\n        renderContext: rightRenderContext\n      }, {\n        disableReorder: true,\n        separatorSide: GridColumnHeaderSeparatorSides.Left\n      })]\n    });\n  };\n  if (process.env.NODE_ENV !== \"production\") getColumnHeadersRow.displayName = \"getColumnHeadersRow\";\n  const getColumnGroupHeaders = ({\n    depth,\n    params\n  }) => {\n    const columnsToRender = getColumnsToRender(params);\n    if (columnsToRender.renderedColumns.length === 0) {\n      return null;\n    }\n    const {\n      firstColumnToRender,\n      lastColumnToRender\n    } = columnsToRender;\n    const rowStructure = columnGroupsHeaderStructure[depth];\n    const firstColumnFieldToRender = visibleColumns[firstColumnToRender].field;\n    const firstGroupToRender = columnGroupsModel[firstColumnFieldToRender]?.[depth] ?? null;\n    const firstGroupIndex = rowStructure.findIndex(({\n      groupId,\n      columnFields\n    }) => groupId === firstGroupToRender && columnFields.includes(firstColumnFieldToRender));\n    const lastColumnFieldToRender = visibleColumns[lastColumnToRender - 1].field;\n    const lastGroupToRender = columnGroupsModel[lastColumnFieldToRender]?.[depth] ?? null;\n    const lastGroupIndex = rowStructure.findIndex(({\n      groupId,\n      columnFields\n    }) => groupId === lastGroupToRender && columnFields.includes(lastColumnFieldToRender));\n    const visibleColumnGroupHeader = rowStructure.slice(firstGroupIndex, lastGroupIndex + 1).map(groupStructure => {\n      return _extends({}, groupStructure, {\n        columnFields: groupStructure.columnFields.filter(field => columnVisibility[field] !== false)\n      });\n    }).filter(groupStructure => groupStructure.columnFields.length > 0);\n    const firstVisibleColumnIndex = visibleColumnGroupHeader[0].columnFields.indexOf(firstColumnFieldToRender);\n    const hiddenGroupColumns = visibleColumnGroupHeader[0].columnFields.slice(0, firstVisibleColumnIndex);\n    const leftOverflow = hiddenGroupColumns.reduce((acc, field) => {\n      const column = columnsLookup[field];\n      return acc + (column.computedWidth ?? 0);\n    }, 0);\n    let columnIndex = firstColumnToRender;\n    const children = visibleColumnGroupHeader.map(({\n      groupId,\n      columnFields\n    }, index) => {\n      const hasFocus = columnGroupHeaderFocus !== null && columnGroupHeaderFocus.depth === depth && columnFields.includes(columnGroupHeaderFocus.field);\n      const tabIndex = columnGroupHeaderTabIndexState !== null && columnGroupHeaderTabIndexState.depth === depth && columnFields.includes(columnGroupHeaderTabIndexState.field) ? 0 : -1;\n      const headerInfo = {\n        groupId,\n        width: columnFields.reduce((acc, field) => acc + columnsLookup[field].computedWidth, 0),\n        fields: columnFields,\n        colIndex: columnIndex,\n        hasFocus,\n        tabIndex\n      };\n      const pinnedPosition = params.position;\n      const pinnedOffset = getPinnedCellOffset(pinnedPosition, headerInfo.width, columnIndex, columnPositions, columnsTotalWidth, scrollbarWidth);\n      columnIndex += columnFields.length;\n      let indexInSection = index;\n      if (pinnedPosition === PinnedColumnPosition.LEFT) {\n        // Group headers can expand to multiple columns, we need to adjust the index\n        indexInSection = columnIndex - 1;\n      }\n      return /*#__PURE__*/_jsx(GridColumnGroupHeader, {\n        groupId: groupId,\n        width: headerInfo.width,\n        fields: headerInfo.fields,\n        colIndex: headerInfo.colIndex,\n        depth: depth,\n        isLastColumn: index === visibleColumnGroupHeader.length - 1,\n        maxDepth: headerGroupingMaxDepth,\n        height: groupHeaderHeight,\n        hasFocus: hasFocus,\n        tabIndex: tabIndex,\n        pinnedPosition: pinnedPosition,\n        pinnedOffset: pinnedOffset,\n        showLeftBorder: shouldCellShowLeftBorder(pinnedPosition, indexInSection),\n        showRightBorder: shouldCellShowRightBorder(pinnedPosition, indexInSection, visibleColumnGroupHeader.length, rootProps.showColumnVerticalBorder, gridHasFiller)\n      }, index);\n    });\n    return getFillers(params, children, leftOverflow);\n  };\n  const getColumnGroupHeadersRows = () => {\n    if (headerGroupingMaxDepth === 0) {\n      return null;\n    }\n    const headerRows = [];\n    for (let depth = 0; depth < headerGroupingMaxDepth; depth += 1) {\n      headerRows.push(/*#__PURE__*/_jsxs(GridColumnHeaderRow, {\n        role: \"row\",\n        \"aria-rowindex\": depth + 1,\n        ownerState: rootProps,\n        style: {\n          height: groupHeaderHeight\n        },\n        children: [leftRenderContext && getColumnGroupHeaders({\n          depth,\n          params: {\n            position: PinnedColumnPosition.LEFT,\n            renderContext: leftRenderContext,\n            maxLastColumn: leftRenderContext.lastColumnIndex\n          }\n        }), getColumnGroupHeaders({\n          depth,\n          params: {\n            renderContext\n          }\n        }), rightRenderContext && getColumnGroupHeaders({\n          depth,\n          params: {\n            position: PinnedColumnPosition.RIGHT,\n            renderContext: rightRenderContext,\n            maxLastColumn: rightRenderContext.lastColumnIndex\n          }\n        })]\n      }, depth));\n    }\n    return headerRows;\n  };\n  return {\n    renderContext,\n    leftRenderContext,\n    rightRenderContext,\n    pinnedColumns,\n    visibleColumns,\n    columnPositions,\n    getFillers,\n    getColumnHeadersRow,\n    getColumnsToRender,\n    getColumnGroupHeadersRows,\n    getPinnedCellOffset,\n    isDragging: !!dragCol,\n    getInnerProps: () => ({\n      role: 'rowgroup'\n    })\n  };\n};","map":{"version":3,"names":["_extends","React","clsx","styled","useGridSelector","useGridRootProps","useGridPrivateApiContext","useGridEvent","GridColumnHeaderItem","gridColumnsTotalWidthSelector","gridGroupHeaderHeightSelector","gridHasFillerSelector","gridHeaderHeightSelector","gridVerticalScrollbarWidthSelector","gridRenderContextColumnsSelector","computeOffsetLeft","GridColumnGroupHeader","gridColumnPositionsSelector","gridVisiblePinnedColumnDefinitionsSelector","gridColumnLookupSelector","gridColumnGroupsUnwrappedModelSelector","GridScrollbarFillerCell","ScrollbarFiller","getPinnedCellOffset","GridColumnHeaderSeparatorSides","gridClasses","shouldCellShowLeftBorder","shouldCellShowRightBorder","PinnedColumnPosition","jsx","_jsx","jsxs","_jsxs","GridColumnHeaderRow","name","slot","display","useGridColumnHeaders","props","visibleColumns","sortColumnLookup","filterColumnLookup","columnHeaderTabIndexState","columnGroupHeaderTabIndexState","columnHeaderFocus","columnGroupHeaderFocus","headerGroupingMaxDepth","columnMenuState","columnVisibility","columnGroupsHeaderStructure","hasOtherElementInTabSequence","dragCol","setDragCol","useState","resizeCol","setResizeCol","apiRef","rootProps","columnGroupsModel","columnPositions","renderContext","pinnedColumns","columnsLookup","offsetLeft","left","length","columnsTotalWidth","gridHasFiller","headerHeight","groupHeaderHeight","scrollbarWidth","handleColumnResizeStart","useCallback","params","field","handleColumnResizeStop","handleColumnReorderStart","handleColumnReorderStop","leftRenderContext","useMemo","firstColumnIndex","lastColumnIndex","rightRenderContext","right","getColumnsToRender","currentContext","firstColumnToRender","lastColumnToRender","renderedColumns","slice","getFillers","children","leftOverflow","borderBottom","isPinnedRight","position","RIGHT","isNotPinned","undefined","hasScrollbarFiller","leftOffsetWidth","Fragment","role","style","width","className","filler","header","pinnedRight","borderTop","process","env","NODE_ENV","displayName","getColumnHeaders","other","columns","i","colDef","columnIndex","isFirstColumn","tabIndex","hasFocus","open","pinnedPosition","pinnedOffset","computedWidth","siblingWithBorderingSeparator","isSiblingFocused","isLastUnpinned","indexInSection","sectionLength","showLeftBorder","showRightBorder","showColumnVerticalBorder","push","columnMenuOpen","filterItemsCounter","isDragging","colIndex","isResizing","isLast","getColumnHeadersRow","ownerState","height","LEFT","disableReorder","separatorSide","Left","getColumnGroupHeaders","depth","columnsToRender","rowStructure","firstColumnFieldToRender","firstGroupToRender","firstGroupIndex","findIndex","groupId","columnFields","includes","lastColumnFieldToRender","lastGroupToRender","lastGroupIndex","visibleColumnGroupHeader","map","groupStructure","filter","firstVisibleColumnIndex","indexOf","hiddenGroupColumns","reduce","acc","column","index","headerInfo","fields","isLastColumn","maxDepth","getColumnGroupHeadersRows","headerRows","maxLastColumn","getInnerProps"],"sources":["D:/Goproject/webcrawler/web-crawler-ui/node_modules/@mui/x-data-grid/esm/hooks/features/columnHeaders/useGridColumnHeaders.js"],"sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { styled } from '@mui/material/styles';\nimport { useGridSelector } from \"../../utils/index.js\";\nimport { useGridRootProps } from \"../../utils/useGridRootProps.js\";\nimport { useGridPrivateApiContext } from \"../../utils/useGridPrivateApiContext.js\";\nimport { useGridEvent } from \"../../utils/useGridEvent.js\";\nimport { GridColumnHeaderItem } from \"../../../components/columnHeaders/GridColumnHeaderItem.js\";\nimport { gridColumnsTotalWidthSelector, gridGroupHeaderHeightSelector, gridHasFillerSelector, gridHeaderHeightSelector, gridVerticalScrollbarWidthSelector } from \"../dimensions/gridDimensionsSelectors.js\";\nimport { gridRenderContextColumnsSelector } from \"../virtualization/index.js\";\nimport { computeOffsetLeft } from \"../virtualization/useGridVirtualScroller.js\";\nimport { GridColumnGroupHeader } from \"../../../components/columnHeaders/GridColumnGroupHeader.js\";\nimport { gridColumnPositionsSelector, gridVisiblePinnedColumnDefinitionsSelector, gridColumnLookupSelector } from \"../columns/index.js\";\nimport { gridColumnGroupsUnwrappedModelSelector } from \"../columnGrouping/gridColumnGroupsSelector.js\";\nimport { GridScrollbarFillerCell as ScrollbarFiller } from \"../../../components/GridScrollbarFillerCell.js\";\nimport { getPinnedCellOffset } from \"../../../internals/utils/getPinnedCellOffset.js\";\nimport { GridColumnHeaderSeparatorSides } from \"../../../components/columnHeaders/GridColumnHeaderSeparator.js\";\nimport { gridClasses } from \"../../../constants/gridClasses.js\";\nimport { shouldCellShowLeftBorder, shouldCellShowRightBorder } from \"../../../utils/cellBorderUtils.js\";\nimport { PinnedColumnPosition } from \"../../../internals/constants.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const GridColumnHeaderRow = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'ColumnHeaderRow'\n})({\n  display: 'flex'\n});\nexport const useGridColumnHeaders = props => {\n  const {\n    visibleColumns,\n    sortColumnLookup,\n    filterColumnLookup,\n    columnHeaderTabIndexState,\n    columnGroupHeaderTabIndexState,\n    columnHeaderFocus,\n    columnGroupHeaderFocus,\n    headerGroupingMaxDepth,\n    columnMenuState,\n    columnVisibility,\n    columnGroupsHeaderStructure,\n    hasOtherElementInTabSequence\n  } = props;\n  const [dragCol, setDragCol] = React.useState('');\n  const [resizeCol, setResizeCol] = React.useState('');\n  const apiRef = useGridPrivateApiContext();\n  const rootProps = useGridRootProps();\n  const columnGroupsModel = useGridSelector(apiRef, gridColumnGroupsUnwrappedModelSelector);\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const renderContext = useGridSelector(apiRef, gridRenderContextColumnsSelector);\n  const pinnedColumns = useGridSelector(apiRef, gridVisiblePinnedColumnDefinitionsSelector);\n  const columnsLookup = useGridSelector(apiRef, gridColumnLookupSelector);\n  const offsetLeft = computeOffsetLeft(columnPositions, renderContext, pinnedColumns.left.length);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const gridHasFiller = useGridSelector(apiRef, gridHasFillerSelector);\n  const headerHeight = useGridSelector(apiRef, gridHeaderHeightSelector);\n  const groupHeaderHeight = useGridSelector(apiRef, gridGroupHeaderHeightSelector);\n  const scrollbarWidth = useGridSelector(apiRef, gridVerticalScrollbarWidthSelector);\n  const handleColumnResizeStart = React.useCallback(params => setResizeCol(params.field), []);\n  const handleColumnResizeStop = React.useCallback(() => setResizeCol(''), []);\n  const handleColumnReorderStart = React.useCallback(params => setDragCol(params.field), []);\n  const handleColumnReorderStop = React.useCallback(() => setDragCol(''), []);\n  const leftRenderContext = React.useMemo(() => {\n    return pinnedColumns.left.length ? {\n      firstColumnIndex: 0,\n      lastColumnIndex: pinnedColumns.left.length\n    } : null;\n  }, [pinnedColumns.left.length]);\n  const rightRenderContext = React.useMemo(() => {\n    return pinnedColumns.right.length ? {\n      firstColumnIndex: visibleColumns.length - pinnedColumns.right.length,\n      lastColumnIndex: visibleColumns.length\n    } : null;\n  }, [pinnedColumns.right.length, visibleColumns.length]);\n  useGridEvent(apiRef, 'columnResizeStart', handleColumnResizeStart);\n  useGridEvent(apiRef, 'columnResizeStop', handleColumnResizeStop);\n  useGridEvent(apiRef, 'columnHeaderDragStart', handleColumnReorderStart);\n  useGridEvent(apiRef, 'columnHeaderDragEndNative', handleColumnReorderStop);\n\n  // Helper for computation common between getColumnHeaders and getColumnGroupHeaders\n  const getColumnsToRender = params => {\n    const {\n      renderContext: currentContext = renderContext\n    } = params || {};\n    const firstColumnToRender = currentContext.firstColumnIndex;\n    const lastColumnToRender = currentContext.lastColumnIndex;\n    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n    return {\n      renderedColumns,\n      firstColumnToRender,\n      lastColumnToRender\n    };\n  };\n  const getFillers = (params, children, leftOverflow, borderBottom = false) => {\n    const isPinnedRight = params?.position === PinnedColumnPosition.RIGHT;\n    const isNotPinned = params?.position === undefined;\n    const hasScrollbarFiller = pinnedColumns.right.length > 0 && isPinnedRight || pinnedColumns.right.length === 0 && isNotPinned;\n    const leftOffsetWidth = offsetLeft - leftOverflow;\n    return /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [isNotPinned && /*#__PURE__*/_jsx(\"div\", {\n        role: \"presentation\",\n        style: {\n          width: leftOffsetWidth\n        }\n      }), children, isNotPinned && /*#__PURE__*/_jsx(\"div\", {\n        role: \"presentation\",\n        className: clsx(gridClasses.filler, borderBottom && gridClasses['filler--borderBottom'])\n      }), hasScrollbarFiller && /*#__PURE__*/_jsx(ScrollbarFiller, {\n        header: true,\n        pinnedRight: isPinnedRight,\n        borderBottom: borderBottom,\n        borderTop: false\n      })]\n    });\n  };\n  if (process.env.NODE_ENV !== \"production\") getFillers.displayName = \"getFillers\";\n  const getColumnHeaders = (params, other = {}) => {\n    const {\n      renderedColumns,\n      firstColumnToRender\n    } = getColumnsToRender(params);\n    const columns = [];\n    for (let i = 0; i < renderedColumns.length; i += 1) {\n      const colDef = renderedColumns[i];\n      const columnIndex = firstColumnToRender + i;\n      const isFirstColumn = columnIndex === 0;\n      const tabIndex = columnHeaderTabIndexState !== null && columnHeaderTabIndexState.field === colDef.field || isFirstColumn && !hasOtherElementInTabSequence ? 0 : -1;\n      const hasFocus = columnHeaderFocus !== null && columnHeaderFocus.field === colDef.field;\n      const open = columnMenuState.open && columnMenuState.field === colDef.field;\n      const pinnedPosition = params?.position;\n      const pinnedOffset = getPinnedCellOffset(pinnedPosition, colDef.computedWidth, columnIndex, columnPositions, columnsTotalWidth, scrollbarWidth);\n      const siblingWithBorderingSeparator = pinnedPosition === PinnedColumnPosition.RIGHT ? renderedColumns[i - 1] : renderedColumns[i + 1];\n      const isSiblingFocused = siblingWithBorderingSeparator ? columnHeaderFocus !== null && columnHeaderFocus.field === siblingWithBorderingSeparator.field : false;\n      const isLastUnpinned = columnIndex + 1 === columnPositions.length - pinnedColumns.right.length;\n      const indexInSection = i;\n      const sectionLength = renderedColumns.length;\n      const showLeftBorder = shouldCellShowLeftBorder(pinnedPosition, indexInSection);\n      const showRightBorder = shouldCellShowRightBorder(pinnedPosition, indexInSection, sectionLength, rootProps.showColumnVerticalBorder, gridHasFiller);\n      columns.push(/*#__PURE__*/_jsx(GridColumnHeaderItem, _extends({}, sortColumnLookup[colDef.field], {\n        columnMenuOpen: open,\n        filterItemsCounter: filterColumnLookup[colDef.field] && filterColumnLookup[colDef.field].length,\n        headerHeight: headerHeight,\n        isDragging: colDef.field === dragCol,\n        colDef: colDef,\n        colIndex: columnIndex,\n        isResizing: resizeCol === colDef.field,\n        isLast: columnIndex === columnPositions.length - 1,\n        hasFocus: hasFocus,\n        tabIndex: tabIndex,\n        pinnedPosition: pinnedPosition,\n        pinnedOffset: pinnedOffset,\n        isLastUnpinned: isLastUnpinned,\n        isSiblingFocused: isSiblingFocused,\n        showLeftBorder: showLeftBorder,\n        showRightBorder: showRightBorder\n      }, other), colDef.field));\n    }\n    return getFillers(params, columns, 0);\n  };\n  const getColumnHeadersRow = () => {\n    return /*#__PURE__*/_jsxs(GridColumnHeaderRow, {\n      role: \"row\",\n      \"aria-rowindex\": headerGroupingMaxDepth + 1,\n      ownerState: rootProps,\n      className: gridClasses['row--borderBottom'],\n      style: {\n        height: headerHeight\n      },\n      children: [leftRenderContext && getColumnHeaders({\n        position: PinnedColumnPosition.LEFT,\n        renderContext: leftRenderContext\n      }, {\n        disableReorder: true\n      }), getColumnHeaders({\n        renderContext\n      }), rightRenderContext && getColumnHeaders({\n        position: PinnedColumnPosition.RIGHT,\n        renderContext: rightRenderContext\n      }, {\n        disableReorder: true,\n        separatorSide: GridColumnHeaderSeparatorSides.Left\n      })]\n    });\n  };\n  if (process.env.NODE_ENV !== \"production\") getColumnHeadersRow.displayName = \"getColumnHeadersRow\";\n  const getColumnGroupHeaders = ({\n    depth,\n    params\n  }) => {\n    const columnsToRender = getColumnsToRender(params);\n    if (columnsToRender.renderedColumns.length === 0) {\n      return null;\n    }\n    const {\n      firstColumnToRender,\n      lastColumnToRender\n    } = columnsToRender;\n    const rowStructure = columnGroupsHeaderStructure[depth];\n    const firstColumnFieldToRender = visibleColumns[firstColumnToRender].field;\n    const firstGroupToRender = columnGroupsModel[firstColumnFieldToRender]?.[depth] ?? null;\n    const firstGroupIndex = rowStructure.findIndex(({\n      groupId,\n      columnFields\n    }) => groupId === firstGroupToRender && columnFields.includes(firstColumnFieldToRender));\n    const lastColumnFieldToRender = visibleColumns[lastColumnToRender - 1].field;\n    const lastGroupToRender = columnGroupsModel[lastColumnFieldToRender]?.[depth] ?? null;\n    const lastGroupIndex = rowStructure.findIndex(({\n      groupId,\n      columnFields\n    }) => groupId === lastGroupToRender && columnFields.includes(lastColumnFieldToRender));\n    const visibleColumnGroupHeader = rowStructure.slice(firstGroupIndex, lastGroupIndex + 1).map(groupStructure => {\n      return _extends({}, groupStructure, {\n        columnFields: groupStructure.columnFields.filter(field => columnVisibility[field] !== false)\n      });\n    }).filter(groupStructure => groupStructure.columnFields.length > 0);\n    const firstVisibleColumnIndex = visibleColumnGroupHeader[0].columnFields.indexOf(firstColumnFieldToRender);\n    const hiddenGroupColumns = visibleColumnGroupHeader[0].columnFields.slice(0, firstVisibleColumnIndex);\n    const leftOverflow = hiddenGroupColumns.reduce((acc, field) => {\n      const column = columnsLookup[field];\n      return acc + (column.computedWidth ?? 0);\n    }, 0);\n    let columnIndex = firstColumnToRender;\n    const children = visibleColumnGroupHeader.map(({\n      groupId,\n      columnFields\n    }, index) => {\n      const hasFocus = columnGroupHeaderFocus !== null && columnGroupHeaderFocus.depth === depth && columnFields.includes(columnGroupHeaderFocus.field);\n      const tabIndex = columnGroupHeaderTabIndexState !== null && columnGroupHeaderTabIndexState.depth === depth && columnFields.includes(columnGroupHeaderTabIndexState.field) ? 0 : -1;\n      const headerInfo = {\n        groupId,\n        width: columnFields.reduce((acc, field) => acc + columnsLookup[field].computedWidth, 0),\n        fields: columnFields,\n        colIndex: columnIndex,\n        hasFocus,\n        tabIndex\n      };\n      const pinnedPosition = params.position;\n      const pinnedOffset = getPinnedCellOffset(pinnedPosition, headerInfo.width, columnIndex, columnPositions, columnsTotalWidth, scrollbarWidth);\n      columnIndex += columnFields.length;\n      let indexInSection = index;\n      if (pinnedPosition === PinnedColumnPosition.LEFT) {\n        // Group headers can expand to multiple columns, we need to adjust the index\n        indexInSection = columnIndex - 1;\n      }\n      return /*#__PURE__*/_jsx(GridColumnGroupHeader, {\n        groupId: groupId,\n        width: headerInfo.width,\n        fields: headerInfo.fields,\n        colIndex: headerInfo.colIndex,\n        depth: depth,\n        isLastColumn: index === visibleColumnGroupHeader.length - 1,\n        maxDepth: headerGroupingMaxDepth,\n        height: groupHeaderHeight,\n        hasFocus: hasFocus,\n        tabIndex: tabIndex,\n        pinnedPosition: pinnedPosition,\n        pinnedOffset: pinnedOffset,\n        showLeftBorder: shouldCellShowLeftBorder(pinnedPosition, indexInSection),\n        showRightBorder: shouldCellShowRightBorder(pinnedPosition, indexInSection, visibleColumnGroupHeader.length, rootProps.showColumnVerticalBorder, gridHasFiller)\n      }, index);\n    });\n    return getFillers(params, children, leftOverflow);\n  };\n  const getColumnGroupHeadersRows = () => {\n    if (headerGroupingMaxDepth === 0) {\n      return null;\n    }\n    const headerRows = [];\n    for (let depth = 0; depth < headerGroupingMaxDepth; depth += 1) {\n      headerRows.push(/*#__PURE__*/_jsxs(GridColumnHeaderRow, {\n        role: \"row\",\n        \"aria-rowindex\": depth + 1,\n        ownerState: rootProps,\n        style: {\n          height: groupHeaderHeight\n        },\n        children: [leftRenderContext && getColumnGroupHeaders({\n          depth,\n          params: {\n            position: PinnedColumnPosition.LEFT,\n            renderContext: leftRenderContext,\n            maxLastColumn: leftRenderContext.lastColumnIndex\n          }\n        }), getColumnGroupHeaders({\n          depth,\n          params: {\n            renderContext\n          }\n        }), rightRenderContext && getColumnGroupHeaders({\n          depth,\n          params: {\n            position: PinnedColumnPosition.RIGHT,\n            renderContext: rightRenderContext,\n            maxLastColumn: rightRenderContext.lastColumnIndex\n          }\n        })]\n      }, depth));\n    }\n    return headerRows;\n  };\n  return {\n    renderContext,\n    leftRenderContext,\n    rightRenderContext,\n    pinnedColumns,\n    visibleColumns,\n    columnPositions,\n    getFillers,\n    getColumnHeadersRow,\n    getColumnsToRender,\n    getColumnGroupHeadersRows,\n    getPinnedCellOffset,\n    isDragging: !!dragCol,\n    getInnerProps: () => ({\n      role: 'rowgroup'\n    })\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}