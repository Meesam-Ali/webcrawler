{"ast":null,"code":"import { createSelector, createSelectorMemoized, createRootSelector } from \"../../../utils/createSelector.js\";\nimport { EMPTY_PINNED_COLUMN_FIELDS } from \"./gridColumnsInterfaces.js\";\nimport { gridIsRtlSelector } from \"../../core/gridCoreSelector.js\";\n\n/**\n * Get the columns state\n * @category Columns\n */\nexport const gridColumnsStateSelector = createRootSelector(state => state.columns);\n\n/**\n * Get an array of column fields in the order rendered on screen.\n * @category Columns\n */\nexport const gridColumnFieldsSelector = createSelector(gridColumnsStateSelector, columnsState => columnsState.orderedFields);\n\n/**\n * Get the columns as a lookup (an object containing the field for keys and the definition for values).\n * @category Columns\n */\nexport const gridColumnLookupSelector = createSelector(gridColumnsStateSelector, columnsState => columnsState.lookup);\n\n/**\n * Get an array of column definitions in the order rendered on screen..\n * @category Columns\n */\nexport const gridColumnDefinitionsSelector = createSelectorMemoized(gridColumnFieldsSelector, gridColumnLookupSelector, (allFields, lookup) => allFields.map(field => lookup[field]));\n\n/**\n * Get the column visibility model, containing the visibility status of each column.\n * If a column is not registered in the model, it is visible.\n * @category Visible Columns\n */\nexport const gridColumnVisibilityModelSelector = createSelector(gridColumnsStateSelector, columnsState => columnsState.columnVisibilityModel);\n\n/**\n * Get the \"initial\" column visibility model, containing the visibility status of each column.\n * It is updated when the `columns` prop is updated or when `updateColumns` API method is called.\n * If a column is not registered in the model, it is visible.\n * @category Visible Columns\n */\nexport const gridInitialColumnVisibilityModelSelector = createSelector(gridColumnsStateSelector, columnsState => columnsState.initialColumnVisibilityModel);\n\n/**\n * Get the visible columns as a lookup (an object containing the field for keys and the definition for values).\n * @category Visible Columns\n */\nexport const gridVisibleColumnDefinitionsSelector = createSelectorMemoized(gridColumnDefinitionsSelector, gridColumnVisibilityModelSelector, (columns, columnVisibilityModel) => columns.filter(column => columnVisibilityModel[column.field] !== false));\n\n/**\n * Get the field of each visible column.\n * @category Visible Columns\n */\nexport const gridVisibleColumnFieldsSelector = createSelectorMemoized(gridVisibleColumnDefinitionsSelector, visibleColumns => visibleColumns.map(column => column.field));\n\n/**\n * Get the visible pinned columns model.\n * @category Visible Columns\n */\nexport const gridPinnedColumnsSelector = createRootSelector(state => state.pinnedColumns);\n\n/**\n * Get all existing pinned columns. Place the columns on the side that depends on the rtl state.\n * @category Pinned Columns\n * @ignore - Do not document\n */\nexport const gridExistingPinnedColumnSelector = createSelectorMemoized(gridPinnedColumnsSelector, gridColumnFieldsSelector, gridIsRtlSelector, (model, orderedFields, isRtl) => filterMissingColumns(model, orderedFields, isRtl));\n\n/**\n * Get the visible pinned columns.\n * @category Visible Columns\n */\nexport const gridVisiblePinnedColumnDefinitionsSelector = createSelectorMemoized(gridColumnsStateSelector, gridPinnedColumnsSelector, gridVisibleColumnFieldsSelector, gridIsRtlSelector, (columnsState, model, visibleColumnFields, isRtl) => {\n  const visiblePinnedFields = filterMissingColumns(model, visibleColumnFields, isRtl);\n  const visiblePinnedColumns = {\n    left: visiblePinnedFields.left.map(field => columnsState.lookup[field]),\n    right: visiblePinnedFields.right.map(field => columnsState.lookup[field])\n  };\n  return visiblePinnedColumns;\n});\nfunction filterMissingColumns(pinnedColumns, columns, invert) {\n  if (!Array.isArray(pinnedColumns.left) && !Array.isArray(pinnedColumns.right)) {\n    return EMPTY_PINNED_COLUMN_FIELDS;\n  }\n  if (pinnedColumns.left?.length === 0 && pinnedColumns.right?.length === 0) {\n    return EMPTY_PINNED_COLUMN_FIELDS;\n  }\n  const filter = (newPinnedColumns, remainingColumns) => {\n    if (!Array.isArray(newPinnedColumns)) {\n      return [];\n    }\n    return newPinnedColumns.filter(field => remainingColumns.includes(field));\n  };\n  const leftPinnedColumns = filter(pinnedColumns.left, columns);\n  const columnsWithoutLeftPinnedColumns = columns.filter(\n  // Filter out from the remaining columns those columns already pinned to the left\n  field => !leftPinnedColumns.includes(field));\n  const rightPinnedColumns = filter(pinnedColumns.right, columnsWithoutLeftPinnedColumns);\n  if (invert) {\n    return {\n      left: rightPinnedColumns,\n      right: leftPinnedColumns\n    };\n  }\n  return {\n    left: leftPinnedColumns,\n    right: rightPinnedColumns\n  };\n}\n\n/**\n * Get the left position in pixel of each visible columns relative to the left of the first column.\n * @category Visible Columns\n */\nexport const gridColumnPositionsSelector = createSelectorMemoized(gridVisibleColumnDefinitionsSelector, visibleColumns => {\n  const positions = [];\n  let currentPosition = 0;\n  for (let i = 0; i < visibleColumns.length; i += 1) {\n    positions.push(currentPosition);\n    currentPosition += visibleColumns[i].computedWidth;\n  }\n  return positions;\n});\n\n/**\n * Get the filterable columns as an array.\n * @category Columns\n */\nexport const gridFilterableColumnDefinitionsSelector = createSelectorMemoized(gridColumnDefinitionsSelector, columns => columns.filter(col => col.filterable));\n\n/**\n * Get the filterable columns as a lookup (an object containing the field for keys and the definition for values).\n * @category Columns\n */\nexport const gridFilterableColumnLookupSelector = createSelectorMemoized(gridColumnDefinitionsSelector, columns => columns.reduce((acc, col) => {\n  if (col.filterable) {\n    acc[col.field] = col;\n  }\n  return acc;\n}, {}));\n\n/**\n * Checks if some column has a colSpan field.\n * @category Columns\n * @ignore - Do not document\n */\nexport const gridHasColSpanSelector = createSelectorMemoized(gridColumnDefinitionsSelector, columns => columns.some(column => column.colSpan !== undefined));","map":{"version":3,"names":["createSelector","createSelectorMemoized","createRootSelector","EMPTY_PINNED_COLUMN_FIELDS","gridIsRtlSelector","gridColumnsStateSelector","state","columns","gridColumnFieldsSelector","columnsState","orderedFields","gridColumnLookupSelector","lookup","gridColumnDefinitionsSelector","allFields","map","field","gridColumnVisibilityModelSelector","columnVisibilityModel","gridInitialColumnVisibilityModelSelector","initialColumnVisibilityModel","gridVisibleColumnDefinitionsSelector","filter","column","gridVisibleColumnFieldsSelector","visibleColumns","gridPinnedColumnsSelector","pinnedColumns","gridExistingPinnedColumnSelector","model","isRtl","filterMissingColumns","gridVisiblePinnedColumnDefinitionsSelector","visibleColumnFields","visiblePinnedFields","visiblePinnedColumns","left","right","invert","Array","isArray","length","newPinnedColumns","remainingColumns","includes","leftPinnedColumns","columnsWithoutLeftPinnedColumns","rightPinnedColumns","gridColumnPositionsSelector","positions","currentPosition","i","push","computedWidth","gridFilterableColumnDefinitionsSelector","col","filterable","gridFilterableColumnLookupSelector","reduce","acc","gridHasColSpanSelector","some","colSpan","undefined"],"sources":["D:/Goproject/webcrawler/web-crawler-ui/node_modules/@mui/x-data-grid/esm/hooks/features/columns/gridColumnsSelector.js"],"sourcesContent":["import { createSelector, createSelectorMemoized, createRootSelector } from \"../../../utils/createSelector.js\";\nimport { EMPTY_PINNED_COLUMN_FIELDS } from \"./gridColumnsInterfaces.js\";\nimport { gridIsRtlSelector } from \"../../core/gridCoreSelector.js\";\n\n/**\n * Get the columns state\n * @category Columns\n */\nexport const gridColumnsStateSelector = createRootSelector(state => state.columns);\n\n/**\n * Get an array of column fields in the order rendered on screen.\n * @category Columns\n */\nexport const gridColumnFieldsSelector = createSelector(gridColumnsStateSelector, columnsState => columnsState.orderedFields);\n\n/**\n * Get the columns as a lookup (an object containing the field for keys and the definition for values).\n * @category Columns\n */\nexport const gridColumnLookupSelector = createSelector(gridColumnsStateSelector, columnsState => columnsState.lookup);\n\n/**\n * Get an array of column definitions in the order rendered on screen..\n * @category Columns\n */\nexport const gridColumnDefinitionsSelector = createSelectorMemoized(gridColumnFieldsSelector, gridColumnLookupSelector, (allFields, lookup) => allFields.map(field => lookup[field]));\n\n/**\n * Get the column visibility model, containing the visibility status of each column.\n * If a column is not registered in the model, it is visible.\n * @category Visible Columns\n */\nexport const gridColumnVisibilityModelSelector = createSelector(gridColumnsStateSelector, columnsState => columnsState.columnVisibilityModel);\n\n/**\n * Get the \"initial\" column visibility model, containing the visibility status of each column.\n * It is updated when the `columns` prop is updated or when `updateColumns` API method is called.\n * If a column is not registered in the model, it is visible.\n * @category Visible Columns\n */\nexport const gridInitialColumnVisibilityModelSelector = createSelector(gridColumnsStateSelector, columnsState => columnsState.initialColumnVisibilityModel);\n\n/**\n * Get the visible columns as a lookup (an object containing the field for keys and the definition for values).\n * @category Visible Columns\n */\nexport const gridVisibleColumnDefinitionsSelector = createSelectorMemoized(gridColumnDefinitionsSelector, gridColumnVisibilityModelSelector, (columns, columnVisibilityModel) => columns.filter(column => columnVisibilityModel[column.field] !== false));\n\n/**\n * Get the field of each visible column.\n * @category Visible Columns\n */\nexport const gridVisibleColumnFieldsSelector = createSelectorMemoized(gridVisibleColumnDefinitionsSelector, visibleColumns => visibleColumns.map(column => column.field));\n\n/**\n * Get the visible pinned columns model.\n * @category Visible Columns\n */\nexport const gridPinnedColumnsSelector = createRootSelector(state => state.pinnedColumns);\n\n/**\n * Get all existing pinned columns. Place the columns on the side that depends on the rtl state.\n * @category Pinned Columns\n * @ignore - Do not document\n */\nexport const gridExistingPinnedColumnSelector = createSelectorMemoized(gridPinnedColumnsSelector, gridColumnFieldsSelector, gridIsRtlSelector, (model, orderedFields, isRtl) => filterMissingColumns(model, orderedFields, isRtl));\n\n/**\n * Get the visible pinned columns.\n * @category Visible Columns\n */\nexport const gridVisiblePinnedColumnDefinitionsSelector = createSelectorMemoized(gridColumnsStateSelector, gridPinnedColumnsSelector, gridVisibleColumnFieldsSelector, gridIsRtlSelector, (columnsState, model, visibleColumnFields, isRtl) => {\n  const visiblePinnedFields = filterMissingColumns(model, visibleColumnFields, isRtl);\n  const visiblePinnedColumns = {\n    left: visiblePinnedFields.left.map(field => columnsState.lookup[field]),\n    right: visiblePinnedFields.right.map(field => columnsState.lookup[field])\n  };\n  return visiblePinnedColumns;\n});\nfunction filterMissingColumns(pinnedColumns, columns, invert) {\n  if (!Array.isArray(pinnedColumns.left) && !Array.isArray(pinnedColumns.right)) {\n    return EMPTY_PINNED_COLUMN_FIELDS;\n  }\n  if (pinnedColumns.left?.length === 0 && pinnedColumns.right?.length === 0) {\n    return EMPTY_PINNED_COLUMN_FIELDS;\n  }\n  const filter = (newPinnedColumns, remainingColumns) => {\n    if (!Array.isArray(newPinnedColumns)) {\n      return [];\n    }\n    return newPinnedColumns.filter(field => remainingColumns.includes(field));\n  };\n  const leftPinnedColumns = filter(pinnedColumns.left, columns);\n  const columnsWithoutLeftPinnedColumns = columns.filter(\n  // Filter out from the remaining columns those columns already pinned to the left\n  field => !leftPinnedColumns.includes(field));\n  const rightPinnedColumns = filter(pinnedColumns.right, columnsWithoutLeftPinnedColumns);\n  if (invert) {\n    return {\n      left: rightPinnedColumns,\n      right: leftPinnedColumns\n    };\n  }\n  return {\n    left: leftPinnedColumns,\n    right: rightPinnedColumns\n  };\n}\n\n/**\n * Get the left position in pixel of each visible columns relative to the left of the first column.\n * @category Visible Columns\n */\nexport const gridColumnPositionsSelector = createSelectorMemoized(gridVisibleColumnDefinitionsSelector, visibleColumns => {\n  const positions = [];\n  let currentPosition = 0;\n  for (let i = 0; i < visibleColumns.length; i += 1) {\n    positions.push(currentPosition);\n    currentPosition += visibleColumns[i].computedWidth;\n  }\n  return positions;\n});\n\n/**\n * Get the filterable columns as an array.\n * @category Columns\n */\nexport const gridFilterableColumnDefinitionsSelector = createSelectorMemoized(gridColumnDefinitionsSelector, columns => columns.filter(col => col.filterable));\n\n/**\n * Get the filterable columns as a lookup (an object containing the field for keys and the definition for values).\n * @category Columns\n */\nexport const gridFilterableColumnLookupSelector = createSelectorMemoized(gridColumnDefinitionsSelector, columns => columns.reduce((acc, col) => {\n  if (col.filterable) {\n    acc[col.field] = col;\n  }\n  return acc;\n}, {}));\n\n/**\n * Checks if some column has a colSpan field.\n * @category Columns\n * @ignore - Do not document\n */\nexport const gridHasColSpanSelector = createSelectorMemoized(gridColumnDefinitionsSelector, columns => columns.some(column => column.colSpan !== undefined));"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}